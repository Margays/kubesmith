apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
bootstrapTokens:
nodeRegistration:
  name: "{{ ansible_hostname }}"
  imagePullPolicy: "IfNotPresent"
localAPIEndpoint:
  advertiseAddress: "{{ k8s_cluster_local_api_endpoint }}"
  bindPort: {{ k8s_cluster_local_api_bind_port }}
certificateKey: "e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204"
skipPhases:
  - addon/kube-proxy
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
# etcd:
  # one of local or external
  # local:
  #   imageRepository: "registry.k8s.io"
  #   imageTag: "3.2.24"
  #   dataDir: "/var/lib/etcd"
  #   extraArgs:
  #     listen-client-urls: "http://10.100.0.1:2379"
  #   serverCertSANs:
  #     -  "ec2-10-100-0-1.compute-1.amazonaws.com"
  #   peerCertSANs:
  #     - "10.100.0.1"
  # external:
    # endpoints:
    # - "10.100.0.1:2379"
    # - "10.100.0.2:2379"
    # caFile: "/etcd/kubernetes/pki/etcd/etcd-ca.crt"
    # certFile: "/etcd/kubernetes/pki/etcd/etcd.crt"
    # keyFile: "/etcd/kubernetes/pki/etcd/etcd.key"
networking:
  serviceSubnet: "10.96.0.0/16"
  podSubnet: "10.244.0.0/24"
  dnsDomain: "cluster.local"
kubernetesVersion: "{{ kubelet_version.stdout_lines[0].split(' ')[1] }}"
controlPlaneEndpoint: "{{ k8s_cluster_local_api_endpoint }}:{{ k8s_cluster_local_api_bind_port }}"
certificatesDir: "/etc/kubernetes/pki"
imageRepository: "registry.k8s.io"
clusterName: "example-cluster"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
# kubelet specific options here
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
# kube-proxy specific options here